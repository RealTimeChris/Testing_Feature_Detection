#ifndef JSONIFIER_IMPLEMENTATION_DETECTION_H
#define JSONIFIER_IMPLEMENTATION_DETECTION_H

#include "portability.hpp"

// 0 is reserved, because undefined JSONIFIER_IMPLEMENTATION equals 0 in preprocessor macros.
#define JSONIFIER_IMPLEMENTATION_ID_arm64 1
#define JSONIFIER_IMPLEMENTATION_ID_fallback 2
#define JSONIFIER_IMPLEMENTATION_ID_haswell 3
#define JSONIFIER_IMPLEMENTATION_ID_icelake 4
#define JSONIFIER_IMPLEMENTATION_ID_ppc64 5
#define JSONIFIER_IMPLEMENTATION_ID_westmere 6
#define JSONIFIER_IMPLEMENTATION_ID_lsx 7
#define JSONIFIER_IMPLEMENTATION_ID_lasx 8

#define JSONIFIER_IMPLEMENTATION_ID_FOR(IMPL) JSONIFIER_CAT(JSONIFIER_IMPLEMENTATION_ID_, IMPL)
#define JSONIFIER_IMPLEMENTATION_ID JSONIFIER_IMPLEMENTATION_ID_FOR(JSONIFIER_IMPLEMENTATION)

#define JSONIFIER_IMPLEMENTATION_IS(IMPL) JSONIFIER_IMPLEMENTATION_ID == JSONIFIER_IMPLEMENTATION_ID_FOR(IMPL)

//
// First, figure out which implementations can be run. Doing it here makes it so we don't have to worry about the order
// in which we include them.
//
#define JSONIFIER_AVX512_ALLOWED 1
#ifndef JSONIFIER_IMPLEMENTATION_ARM64
#define JSONIFIER_IMPLEMENTATION_ARM64 (JSONIFIER_IS_ARM64)
#endif
#if JSONIFIER_IMPLEMENTATION_ARM64 && JSONIFIER_IS_ARM64
#define JSONIFIER_CAN_ALWAYS_RUN_ARM64 1
#else
#define JSONIFIER_CAN_ALWAYS_RUN_ARM64 0
#endif

// Default Icelake to on if this is x86-64. Even if we're not compiled for it, it could be selected
// at runtime.
#ifndef JSONIFIER_IMPLEMENTATION_ICELAKE
#define JSONIFIER_IMPLEMENTATION_ICELAKE ((JSONIFIER_IS_X86_64) && (JSONIFIER_AVX512_ALLOWED) && (JSONIFIER_COMPILER_SUPPORTS_VBMI2))
#endif

#ifdef _MSC_VER
// To see why  (__BMI__) && (__PCLMUL__) && (__LZCNT__) are not part of this next line, see
// https://github.com/simdjson/simdjson/issues/1247
#if ((JSONIFIER_IMPLEMENTATION_ICELAKE) && (__AVX2__) && (__AVX512F__) && (__AVX512DQ__) && (__AVX512CD__) && (__AVX512BW__) && (__AVX512VL__) && (__AVX512VBMI2__))
#define JSONIFIER_CAN_ALWAYS_RUN_ICELAKE 1
#else
#define JSONIFIER_CAN_ALWAYS_RUN_ICELAKE 0
#endif

#else

#if ((JSONIFIER_IMPLEMENTATION_ICELAKE) && (__AVX2__) && (__BMI__) && (__PCLMUL__) && (__LZCNT__) && (__AVX512F__) && (__AVX512DQ__) && (__AVX512CD__) && (__AVX512BW__) && (__AVX512VL__) && (__AVX512VBMI2__))
#define JSONIFIER_CAN_ALWAYS_RUN_ICELAKE 1
#else
#define JSONIFIER_CAN_ALWAYS_RUN_ICELAKE 0
#endif

#endif

// Default Haswell to on if this is x86-64. Even if we're not compiled for it, it could be selected
// at runtime.
#ifndef JSONIFIER_IMPLEMENTATION_HASWELL
#if JSONIFIER_CAN_ALWAYS_RUN_ICELAKE
// if icelake is always available, never enable haswell.
#define JSONIFIER_IMPLEMENTATION_HASWELL 0
#else
#define JSONIFIER_IMPLEMENTATION_HASWELL JSONIFIER_IS_X86_64
#endif
#endif
#ifdef _MSC_VER
// To see why  (__BMI__) && (__PCLMUL__) && (__LZCNT__) are not part of this next line, see
// https://github.com/simdjson/simdjson/issues/1247
#if ((JSONIFIER_IMPLEMENTATION_HASWELL) && (JSONIFIER_IS_X86_64) && (__AVX2__))
#define JSONIFIER_CAN_ALWAYS_RUN_HASWELL 1
#else
#define JSONIFIER_CAN_ALWAYS_RUN_HASWELL 0
#endif

#else

#if ((JSONIFIER_IMPLEMENTATION_HASWELL) && (JSONIFIER_IS_X86_64) && (__AVX2__) && (__BMI__) && (__PCLMUL__) && (__LZCNT__))
#define JSONIFIER_CAN_ALWAYS_RUN_HASWELL 1
#else
#define JSONIFIER_CAN_ALWAYS_RUN_HASWELL 0
#endif

#endif

// Default Westmere to on if this is x86-64.
#ifndef JSONIFIER_IMPLEMENTATION_WESTMERE
#if JSONIFIER_CAN_ALWAYS_RUN_ICELAKE || JSONIFIER_CAN_ALWAYS_RUN_HASWELL
// if icelake or haswell are always available, never enable westmere.
#define JSONIFIER_IMPLEMENTATION_WESTMERE 0
#else
#define JSONIFIER_IMPLEMENTATION_WESTMERE JSONIFIER_IS_X86_64
#endif
#endif

#if (JSONIFIER_IMPLEMENTATION_WESTMERE && JSONIFIER_IS_X86_64 && __SSE4_2__ && __PCLMUL__)
#define JSONIFIER_CAN_ALWAYS_RUN_WESTMERE 1
#else
#define JSONIFIER_CAN_ALWAYS_RUN_WESTMERE 0
#endif


#ifndef JSONIFIER_IMPLEMENTATION_PPC64
#define JSONIFIER_IMPLEMENTATION_PPC64 (JSONIFIER_IS_PPC64 && JSONIFIER_IS_PPC64_VMX)
#endif
#if JSONIFIER_IMPLEMENTATION_PPC64 && JSONIFIER_IS_PPC64 && JSONIFIER_IS_PPC64_VMX
#define JSONIFIER_CAN_ALWAYS_RUN_PPC64 1
#else
#define JSONIFIER_CAN_ALWAYS_RUN_PPC64 0
#endif

#ifndef JSONIFIER_IMPLEMENTATION_LASX
#define JSONIFIER_IMPLEMENTATION_LASX (JSONIFIER_IS_LOONGARCH64 && __loongarch_asx)
#endif
#define JSONIFIER_CAN_ALWAYS_RUN_LASX (JSONIFIER_IMPLEMENTATION_LASX)

#ifndef JSONIFIER_IMPLEMENTATION_LSX
#if JSONIFIER_CAN_ALWAYS_RUN_LASX
#define JSONIFIER_IMPLEMENTATION_LSX 0
#else
#define JSONIFIER_IMPLEMENTATION_LSX (JSONIFIER_IS_LOONGARCH64 && __loongarch_sx)
#endif
#endif
#define JSONIFIER_CAN_ALWAYS_RUN_LSX (JSONIFIER_IMPLEMENTATION_LSX)

// Default Fallback to on unless a builtin implementation has already been selected.
#ifndef JSONIFIER_IMPLEMENTATION_FALLBACK
#if JSONIFIER_CAN_ALWAYS_RUN_ARM64 || JSONIFIER_CAN_ALWAYS_RUN_ICELAKE || JSONIFIER_CAN_ALWAYS_RUN_HASWELL || JSONIFIER_CAN_ALWAYS_RUN_WESTMERE || JSONIFIER_CAN_ALWAYS_RUN_PPC64 || JSONIFIER_CAN_ALWAYS_RUN_LSX || JSONIFIER_CAN_ALWAYS_RUN_LASX
// if anything at all except fallback can always run, then disable fallback.
#define JSONIFIER_IMPLEMENTATION_FALLBACK 0
#else
#define JSONIFIER_IMPLEMENTATION_FALLBACK 1
#endif
#endif
#define JSONIFIER_CAN_ALWAYS_RUN_FALLBACK JSONIFIER_IMPLEMENTATION_FALLBACK

// Determine the best builtin implementation
#ifndef JSONIFIER_BUILTIN_IMPLEMENTATION

#if JSONIFIER_CAN_ALWAYS_RUN_ICELAKE
#define JSONIFIER_BUILTIN_IMPLEMENTATION icelake
#elif JSONIFIER_CAN_ALWAYS_RUN_HASWELL
#define JSONIFIER_BUILTIN_IMPLEMENTATION haswell
#elif JSONIFIER_CAN_ALWAYS_RUN_WESTMERE
#define JSONIFIER_BUILTIN_IMPLEMENTATION westmere
#elif JSONIFIER_CAN_ALWAYS_RUN_ARM64
#define JSONIFIER_BUILTIN_IMPLEMENTATION arm64
#elif JSONIFIER_CAN_ALWAYS_RUN_PPC64
#define JSONIFIER_BUILTIN_IMPLEMENTATION ppc64
#elif JSONIFIER_CAN_ALWAYS_RUN_LSX
#define JSONIFIER_BUILTIN_IMPLEMENTATION lsx
#elif JSONIFIER_CAN_ALWAYS_RUN_LASX
#define JSONIFIER_BUILTIN_IMPLEMENTATION lasx
#elif JSONIFIER_CAN_ALWAYS_RUN_FALLBACK
#define JSONIFIER_BUILTIN_IMPLEMENTATION fallback
#else
#error "All possible implementations (including fallback) have been disabled! simdjson will not run."
#endif

#endif // JSONIFIER_BUILTIN_IMPLEMENTATION

#define JSONIFIER_BUILTIN_IMPLEMENTATION_ID JSONIFIER_IMPLEMENTATION_ID_FOR(JSONIFIER_BUILTIN_IMPLEMENTATION)
#define JSONIFIER_BUILTIN_IMPLEMENTATION_IS(IMPL) JSONIFIER_BUILTIN_IMPLEMENTATION_ID == JSONIFIER_IMPLEMENTATION_ID_FOR(IMPL)

#endif // JSONIFIER_IMPLEMENTATION_DETECTION_H